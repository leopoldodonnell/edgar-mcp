name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number for manual release (e.g., 1.0.0)'
        required: true
        default: ''

# Set default permissions for all jobs
permissions:
  contents: write # Required for creating releases

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            output_name: edgar-mcp-windows
            runtime: win-x64
          - os: macos-latest
            output_name: edgar-mcp-macos
            runtime: osx-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./EdgarMcpServer/EdgarMcpServer.csproj

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          dotnet publish ./EdgarMcpServer/EdgarMcpServer.csproj -c Release -r ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=None -p:DebugSymbols=false -p:SuppressTrimAnalysisWarnings=true -o ./publish/${{ matrix.output_name }}
          
      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          dotnet publish ./EdgarMcpServer/EdgarMcpServer.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:IncludeNativeLibrariesForSelfExtract=true \
          -p:DebugType=None \
          -p:DebugSymbols=false \
          -p:SuppressTrimAnalysisWarnings=true \
          -o ./publish/${{ matrix.output_name }}

      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path "./publish/${{ matrix.output_name }}/*" -DestinationPath "./publish/${{ matrix.output_name }}.zip"

      - name: Create archive (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd ./publish
          tar -czvf ${{ matrix.output_name }}.tar.gz ${{ matrix.output_name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output_name }}
          path: ./publish/${{ matrix.output_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # This is required for creating releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: SEC EDGAR MCP Server v${{ steps.version.outputs.version }}
          tag_name: ${{ github.event_name == 'push' && github.ref || format('v{0}', github.event.inputs.version) }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/edgar-mcp-windows/*.zip
            ./artifacts/edgar-mcp-macos/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
